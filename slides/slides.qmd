---
title: "Introduction to Machine Learning with PyTorch"
subtitle: "ICCS Summer school 2023"
format:
  revealjs:
    embed-resources: true
    slide-number: true
    chalkboard: false
    preview-links: auto
    history: false
    logo: https://iccs.cam.ac.uk/sites/iccs.cam.ac.uk/files/logo2_2.png
    theme: [dark, custom.scss]
    render-on-save: true
authors:
  - name: Jim Denholm
    affiliations: AstraZeneca/Cambridge
    orcid: 
  - name: Jack Atkinson
    orcid: 0000-0001-5001-4812
    affiliations: ICCS/Cambridge
revealjs-plugins:
  - attribution
---

# Part 1: Neural-network basics -- and fun applications.


## Stochastic gradient descent (SGD)

- Generally speaking, most neural networks are fit/trained using SGD (or some variant of it).
- To understand how one might fit a function with SGD, let's start with a straight line: $$y=mx+c$$


## Fitting a straight line with SGD I {.smaller}

- **Question**---when we a differentiate a function, what do we get?

::: {.fragment .fade-in}

- Consider:

$$y = mx + c$$

$$\frac{dy}{dx} = m$$

- $m$ is certainly $y$'s slope, but is there a (perhaps) more fundamental way to view a derivative?

:::


## Fitting a straight line with SGD II {.smaller}

- **Answer**---a function's derivative gives a _vector_ which points in the direction of _steepest ascent_.

::: {.fragment .fade-in}

:::: {.columns}
::: {.column width="50%"}

- Consider

$$y = x$$

$$\frac{dy}{dx} = 1$$

- What is the direction of _steepest descent?_

$$-\frac{dy}{dx}$$

:::
::::

![](straight-line.png){.absolute top=35% left=60% width=40%}

:::


## Fitting a straight line with SGD III {.smaller}

- When fitting a function, we are essentially creating a model, $f$, which describes some data, $y$.
- We therefore need a way of measuring how well a model's predictions match our observations.


::: {.fragment .fade-in}

:::: {.columns}
::: {.column width="30%"}

- Consider the data:

| $x_{i}$  | $y_{i}$ |
|:--------:|:-------:|
| 1.0      | 2.1     |
| 2.0      | 3.9     |
| 3.0      | 6.2     |

:::
::: {.column width="70%"}
- We can measure the distance between $f(x_{i})$ and $y_{i}$.
- Normally we might consider the mean-squared error:

$$L_{\text{MSE}} = \frac{1}{n}\sum_{i=1}^{n}\left(y_{i} - f(x_{i})\right)^{2}$$

:::
::::

:::

::: {.fragment .fade-in}
- We can differentiate the loss function w.r.t. to each parameter in the the model $f$.
- We can use these directions of steepest descent to iteratively 'nudge' the parameters in a direction which will reduce the loss.
:::


## Fitting a straight line with SGD IV {.smaller}

:::: {.columns}
::: {.column width="45%"}

- Model: $f(x) = mx + c$

- Data: $\{x_{i}, y_{i}\}$

- Loss: $\frac{1}{n}\sum_{i=1}^{n}(y_{i} - x_{i})^{2}$

:::
::: {.column width="55%"}

- Loss:

$$
L_{\text{MSE}} = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - f(x_{i}))^{2}\\
    = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - mx_{i} + c)^{2}
$$

:::
::::

- We can iteratively minimise the loss by stepping the model's parameters in the direction of steepest descent:

$$m_{n + 1} = -m_{n}\frac{dL}{dm} \cdot l_{r}$$

$$c_{n + 1} = -c_{n}\frac{dL}{dm} \cdot l_{r}$$

- $l_{\text{r}}$ is a small constant known as the _learning rate_.


## Quick recap {.smaller}

To fit a model we need:

- Some data.
- A model.
- A loss function
- An optimisation procedure (often SGD and other flavours of SGD).

All in all, 'tis quite simple.


## What about neural networks? {.smaller}

- Neural networks are just functions.
- We can "train", or "fit", them as we would any other function:
  - by iteratively nudging parameters to minimise a loss.
- With neural networks, differentiating the loss function is a bit more complicated
  - but ultimately it's just the chain rule.
- We won't go through any more maths on the matter---learning resources on the topic are in no short supply.^[The term to search for is ['backpropogation'](https://en.wikipedia.org/wiki/Backpropagation).]


## Fully-connected neural networks {.smaller}

- The simplest neural networks commonly used are generally called fully-connected nerual nets, dense networks, multi-layer perceptrons, or artifical neural networks (ANNs).

:::: {.columns}
::: {.column width=40%}

- We map between the features at consecutive layers through matrix multiplication and the application of some non-linear activation function.

$$a_{l+1} = \sigma \left( W_{l}a_{l} + b_{l} \right)$$

- For common choices of activation functions, see the [PyTorch](https://pytorch.org/docs/stable/nn.html#non-linear-activations-weighted-sum-nonlinearity) docs.

:::
::::

![](https://3b1b-posts.us-east-1.linodeobjects.com//images/topics/neural-networks.jpg){style="border-radius: 50%;" .absolute top=35% left=42.5% width=65%}

::: {.attribution}
Image source: [3Blue1Brown](https://www.3blue1brown.com/topics/neural-networks)
:::


## Uses: Classification and Regression {.smaller}

- Fully-connected neural networks are often applied to tabular data.
  - i.e. where it makes sense to express the data in table-like object (such as a `pandas` data frame).
  - The input features and targets are represented as vectors.
- Neural networks are normally used for one of two things:
  - **Classification**: assigning a semantic label to something -- i.e. is this a dog or cat?
  - **Regression**: Estimating a continuous quantity -- e.g. mass or volume -- based on other information.


# Python and PyTorch {.smaller}

- In this workshop-lecture-thing, we will implement some straightforward neural networks in PyTorch, and use them for different classification and regression problems.
- PyTorch is a deep learning framework that can be used in both Python and C++.
  - I have never met anyone actually training models in C++; I find it a bit weird.
- See the PyTorch website: [https://pytorch.org/](https://pytorch.org/)


# Exercises


## Penguins!

![](https://thecelebrationist.files.wordpress.com/2011/04/madagascar-penguins-movie.jpg)


## Exercise 1 -- classification

- In this exercise, you will train a fully-connected neural network to [*classify the species*]{style="text-decoration: underline;"} of penguins based on certain physical features.
- [https://github.com/allisonhorst/palmerpenguins](https://github.com/allisonhorst/palmerpenguins)^[Thanks to Jack Atkinson for suggesting this dataset.]


## Exercise 2 -- regression

- In this exercise, you will train a fully-connected neural network to [*predict the mass*]{style="text-decoration: underline;"} of penguins based on other physical features.
- [https://github.com/allisonhorst/palmerpenguins](https://github.com/allisonhorst/palmerpenguins)^[Thanks (again) to Jack Atkinson for suggesting this dataset.]


# Part 2: Fun with CNNs


## Convolutional neural networks (CNNs): why? {.smaller}

Advantages over simple ANNs:

- They require far fewer parameters per layer.
  - The forward pass of a conv layer involves running a filter of fixed size over the inputs.
  - The number of parameters per layer _does not_ depend on the input size.
- They are a much more natural choice of function for *image-like* data:

:::: {.columns}
::: {.column width=10%}
:::
::: {.column width=35%}

![](https://machinelearningmastery.com/wp-content/uploads/2019/03/Plot-of-the-First-Nine-Photos-of-Dogs-in-the-Dogs-vs-Cats-Dataset.png)

:::
::: {.column width=10%}
:::
::: {.column width=35%}

![](https://machinelearningmastery.com/wp-content/uploads/2019/03/Plot-of-the-First-Nine-Photos-of-Cats-in-the-Dogs-vs-Cats-Dataset.png)

:::
::::

::: {.attribution}
Image source: [Machine Learning Mastery](https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-to-classify-photos-of-dogs-and-cats/)
::: {.column width=10%}
:::
:::


## Convolutional neural networks (CNNs): why? {.smaller}

Some other points:

- Convolutional layers are translationally invariant:
  - i.e. they don't care _where_ the "dog" is in the image.
- Convolutional layers are _not_ rotationally invariant.
  - e.g. a model trained to detect correctly-oriented human faces will likely fail on upside-down images
  - We can address this with data augmentation (explored in exercises).


## What is a (1D) convolutional layer? {.smaller}

![](1d-conv.png)

See the [`torch.nn.Conv1d` docs](https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html)


## 2D convolutional layer {.smaller}

- Same idea as in on dimension, but in two (funnily enough).

![](2d-conv.png)

- Everthing else proceeds in the same way as with the 1D case.
- See the [`torch.nn.Conv2d` docs](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html).
- As with Linear layers, Conv2d layers also have non-linear activations applied to them.


## Typical CNN overview {.smaller}

::: {layout="[ 0.5, 0.5 ]"}

![](https://miro.medium.com/v2/resize:fit:1162/format:webp/1*tvwYybdIwvoOs0DuUEJJTg.png)

- Series of conv layers extract features from the inputs.
  - Often called an encoder.
- Adaptive pooling layer:
  - Image-like objects $\to$ vectors.
  - Standardises size.
  - [``torch.nn.AdaptiveAvgPool2d``](https://pytorch.org/docs/stable/generated/torch.nn.AdaptiveAvgPool2d.html)
  - [``torch.nn.AdaptiveMaxPool2d``](https://pytorch.org/docs/stable/generated/torch.nn.AdaptiveMaxPool2d.html)
- Classification (or regression) head.

:::

- For common CNN architectures see [``torchvision.models`` docs](https://pytorch.org/vision/stable/models.html).

::: {.attribution}
Image source: [medium.com - binary image classifier cnn using tensorflow](https://medium.com/techiepedia/binary-image-classifier-cnn-using-tensorflow-a3f5d6746697)
:::


# Exercises

## Exercise 1 -- classification

### MNIST hand-written digits.

::: {layout="[ 0.5, 0.5 ]"}

![](https://i.ytimg.com/vi/0QI3xgXuB-Q/hqdefault.jpg)

- In this exercise we'll train a CNN to classify hand-written digits in the MNIST dataset.
- See the [MNIST database wiki](https://en.wikipedia.org/wiki/MNIST_database) for more details.

:::

::: {.attribution}
Image source: [npmjs.com](https://www.npmjs.com/package/mnist)
:::



## Exercise 2---regression
### Random ellipse problem

- In this exercise, we'll train a CNN to estimate the centre $(x_{\text{c}}, y_{\text{c}})$ and the $x$ and $y$ radii of an ellipse defined by
$$
\frac{(x - x_{\text{c}})^{2}}{r_{x}^{2}} + \frac{(y - y_{\text{c}})^{2}}{r_{y}^{2}} = 1
$$

- The ellipse, and the background, will have random colours chosen uniformly on $\left[0,\ 255\right]^{3}$.
- In short, the model must learn to estimate $x_{\text{c}}$, $y_{\text{c}}$, $r_{x}$ and $r_{y}$.

# Further information

## Slides

## Contact

## Resources
